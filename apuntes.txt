Para volver al primer commit:

❯ git status
En la rama master
Cambios no rastreados para el commit:
  (usa "git add <archivo>..." para actualizar lo que será confirmado)
  (usa "git restore <archivo>..." para descartar los cambios en el directorio de trabajo)
        modificados:     grid.css
        modificados:     grid.html

sin cambios agregados al commit (usa "git add" y/o "git commit -a")
❯ git log
commit a301378182da3b326fe38f5462ba7e6d1dfeb59a (HEAD -> master)
Author: NEBULA1978 <rpascualey@gmail.com>
Date:   Wed Sep 20 21:55:19 2023 +0200

    Pryecto inicial añadiendo elementos

commit ea7d23951d488d5e9ac0c0ce56c21f9c33f40105
Author: NEBULA1978 <rpascualey@gmail.com>
Date:   Wed Sep 20 21:48:24 2023 +0200

    Pryecto inicial
❯ git reset --hard ea7d23951d488d5e9ac0c0ce56c21f9c33f40105

HEAD está ahora en ea7d239 Pryecto inicial

    ~/V/css-grid-template-master  ✔  

/////////////////////////////////

Añado nombres a cajas:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Grid</title>
  <link rel="stylesheet" href="grid.css">
</head>
<body class="grid-container">
  <header class="header">
    HEADER
  </header>
  <nav class="navbar">
    NAVBAR
  </nav>
  <aside class="sidebar">
    SIDEBAR
  </aside>
  <article class="main">
    MAIN
  </article>
  <footer class="footer">
    FOOTER
  </footer>
</body>
</html>


///////////////////////////////////////

El código que proporcionaste define una regla CSS para el selector .grid-container. Esta regla se aplica a un elemento HTML con la clase grid-container.

A continuación, se explica lo que hace esta regla:

display: grid;: Establece que el elemento con la clase grid-container utilizará un diseño de cuadrícula CSS. Esto significa que se comportará como un contenedor de cuadrícula para sus elementos secundarios.

gap: 10px;: Establece un espacio de 10 píxeles entre las celdas de la cuadrícula. Esto significa que habrá un espacio de 10 píxeles entre los elementos dentro del contenedor de la cuadrícula.

grid-template: Define la estructura de la cuadrícula. Aquí se especifican las filas de la cuadrícula y su altura. Cada fila está definida entre comillas, y su altura se especifica después del nombre de la fila.

"header" 100px: Esto establece la primera fila con el nombre "header" y una altura de 100 píxeles.
"navbar" 50px: La segunda fila se llama "navbar" y tiene una altura de 50 píxeles.
"main" auto: La tercera fila se llama "main" y tiene una altura automática, lo que significa que se expandirá para ocupar el espacio disponible en función de su contenido.
"sidebar" 100px: La cuarta fila se llama "sidebar" y tiene una altura de 100 píxeles.
"footer" 100px: La quinta fila se llama "footer" y tiene una altura de 100 píxeles.
En resumen, esta regla CSS establece un diseño de cuadrícula con cinco filas en un elemento con la clase grid-container. Cada fila tiene una altura especificada, excepto la fila "main", que se expandirá automáticamente según su contenido. Este diseño de cuadrícula se utiliza comúnmente en diseños web para crear estructuras de página con encabezado, barra de navegación, área principal, barra lateral y pie de página.

Ejemplo:

.grid-container {
  display: grid;
  gap: 10px;
  grid-template:
    "header"  100px
    "navbar"  50px
    "main"    auto
    "sidebar" 100px
    "footer"  100px;
}


//////////////////////////////////////7

añado css:

@import url("https://fonts.googleapis.com/css2?family=Public+Sans&display=swap");

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  height: 100%;
}

body {
  font-family: "Public Sans", sans-serif;
  font-size: 1.2rem;
  min-height: 100%;
}

.grid-container > * {
  box-shadow: -1px 1px 7px 0px rgba(0, 0, 0, 0.75);
  border-radius: 4px;
  padding: 10px;
  text-align: center;
}

.header {
  grid-area: header;
  background-color: #85aedd;
}

.navbar {
  grid-area: navbar;
  background-color: #afd6af;
}

.sidebar {
  grid-area: sidebar;
  background-color: #fdcfcf;
}

.main {
  grid-area: main;
  background-color: #f5f5f5;
}

.footer {
  grid-area: footer;
  background-color: #8c96a0;
}

.grid-container {
  display: grid;
  gap: 10px;
  grid-template:
    "header"  100px
    "navbar"  50px
    "main"    auto
    "sidebar" 100px
    "footer"  100px;
}
/* Diseño de tres columnas con una barra lateral amplia: */
/* Three-column layout with a large sidebar: */

@media (min-width: 1200px) {
  .grid-container {
    grid-template:
      "header  header header" 100px
      "navbar  main   sidebar" auto
      "footer  footer footer" 100px /
      200px auto 300px;
  }
}

/* Diseño de dos columnas con un área de contenido principal amplia: */
/* Two-column layout with a wide main content area */

@media (min-width: 800px) {
  .grid-container {
    grid-template:
      "header  header" 100px
      "main    sidebar" auto
      "footer  footer" 100px /
      auto 300px;
  }
}
/* Diseño de cuatro columnas con columnas distribuidas de manera uniforme: */
/* Four-column layout with evenly distributed columns: css */

@media (min-width: 1200px) {
  .grid-container {
    grid-template:
      "header  header header  header" 100px
      "navbar  main   sidebar footer" auto /
      1fr 1fr 1fr 1fr;
  }
}

/* Two-row layout with a tall header and footer: */
/* Diseño de dos filas con un encabezado y pie de página altos: */

@media (min-width: 800px) {
  .grid-container {
    grid-template:
      "header" 200px
      "main" auto
      "sidebar" 150px
      "footer" 200px /
      1fr;
  }
}


/* ////////////////// */

@media (min-width: 600px) {
  .grid-container {
    /* grid-template-columns: 200px auto;
    grid-template-rows: 100px 50px auto 100px;
    grid-template-areas: 
    "header  header"
    "navbar  navbar"
    "sidebar main"
    "footer  footer"; */

    grid-template:
      "header  header" 100px
      "navbar  navbar" 50px
      "sidebar main"   auto
      "footer  footer" 100px /
      200px    auto;
  }
}

@media (min-width: 900px) {
  .grid-container {
    grid-template:
      "header  header header"  100px
      "navbar  main   sidebar" auto
      "footer  footer footer"  100px /
      200px    auto   200px;
  }
}


/////////////////////////////////////////////


RESUMEN:

CSS Grid responsive layout

Maquetado responsive con CSS Grid

El script que hemos creado te permite gestionar diferentes configuraciones
de grid-container en el mismo archivo CSS al agregar o quitar comentarios en
líneas específicas. De esta manera, puedes mantener varias configuraciones de
grid-container en un solo archivo CSS y activar o desactivar cada una de
ellas según sea necesario simplemente comentando o descomentando las líneas
correspondientes.

Esto es útil cuando deseas alternar entre diferentes tamaños o diseños de
grid-container sin tener que crear múltiples archivos CSS separados. Al
comentar o descomentar las secciones relevantes del archivo, puedes cambiar
fácilmente el diseño de tu página web o aplicación.

En resumen, el script te permite administrar y alternar entre diferentes
configuraciones de grid-container en el mismo archivo CSS de manera eficiente.
